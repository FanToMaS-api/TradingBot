<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExchangeLibrary</name>
    </assembly>
    <members>
        <member name="T:ExchangeLibrary.ExchangeType">
            <summary>
                Типы бирж
            </summary>
        </member>
        <member name="F:ExchangeLibrary.ExchangeType.Binance">
            <summary>
                Binance биржа
            </summary>
        </member>
        <member name="T:ExchangeLibrary.IExchange">
            <summary>
                Общий интерфейс для всех бирж
            </summary>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetSystemStatusAsync(System.Threading.CancellationToken)">
            <summary>
                Вернуть статус системы
            </summary>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetAccountTradingStatusAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
                Вернуть статус аккаунта
            </summary>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetAllTradeObjectInformationAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
                Получить всю информацию об объектах торговли
            </summary>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetTradeFeeAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
                Получить информацию о таксе за все объекты торговли или за определенный
            </summary>
            <param name="name"> Объект торговли </param>
            <param name="recvWindow"> 
                Установить кол-во миллисекунд, которое прибавляется к timestamp
                и формирует окно действия запроса
            </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
                Получить информацию о правилах торговли на бирже
            </summary>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetOrderBookAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Получить книгу ордеров по определенному объекту торговли
            </summary>
            <param name="name"> Объект торговли </param>
            <param name="limit"> 
                Необходимое кол-во ордеров.
                Возможные значения: 5, 10, 20, 50, 100, 500, 1000, 5000
            </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetRecentTradesAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Возвращает последние сделки по паре
            </summary>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetOldTradesAsync(System.String,System.Nullable{System.Int64},System.Int32,System.Threading.CancellationToken)">
            <summary>
                Возвращает исторические сделки по объекту торговли
            </summary>
            <param name="name"> Объект торговли  </param>
            <param name="fromId"> Идентификатор сделки для получения. По умолчанию получают самые последние сделки </param>
            <param name="limit"> Кол-во сделок (максимум 1000, по умолчанию 500) </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetCandlestickAsync(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Int32,System.Threading.CancellationToken)">
            <summary>
                Возвращает свечи по определенному объекту торговли
            </summary>
            <param name="name"> Объект торговли </param>
            <param name="interval"> Период свечи </param>
            <param name="startTime"> Время начала построения </param>
            <param name="endTime"> Окончание периода </param>
            <param name="limit"> Кол-во свечей (максимум 1000, по умолчанию 500) </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetAveragePriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Возвращает текущую среднюю цену объекта торговли
            </summary>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetDayPriceChangeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Возвращает 24 статистику о цене для объекта торговли или объектовр, если <code><paramref name="name" /> = null or ""</code>
            </summary>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetSymbolPriceTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Возвращает последнюю цену для пары или для всех объектов торговли, если <code><paramref name="name" /> = null or ""</code>
            </summary>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetBestSymbolOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Возвращает лучшую цену/количество в стакане для объекта торговли или объектов
            </summary>
        </member>
        <member name="M:ExchangeLibrary.IExchange.SubscribeNewStream``1(System.String,System.String,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Action)">
            <summary>
                Подписывается на стрим данных
            </summary>
            <typeparam name="T"> Объект для работы с данными полученными со стрима </typeparam>
            <param name="name"> Пара </param>
            <param name="streamType"> Тип стрима </param>
            <remarks> 
                Возможные значения стримов для Binance:
                <br/>
                @aggTrade - торговая информация для одного ордера тейкера (Модель <see cref="T:Common.Models.AggregateTradeStreamModel"/>)
                <br/>
                @bookTicker - лучшая цена, количество для указанного объекта торговли (Модель <see cref="T:Common.Models.BookTickerStreamModel"/>)
                <br/>
                @miniTicker - выборка информации о статистике бегущего окна за 24 часа для объекта торговли (Модель <see cref="T:Common.Models.MiniTickerStreamModel"/>)
                <br/>
                @ticker - информация о статистике бегущего окна за 24 часа для объекта торговли (Модель <see cref="T:Common.Models.TradeObjectStreamModel"/>)
                <br/>
                @trade - информация о торговле объектом (Модель <see cref="T:Common.Models.TradeStreamModel"/>)
            </remarks>
            <param name="onMessageReceivedFunc"> Функция обрабатываюащя данные объекта <see cref="!:T"/> </param>
            <param name="cancellationToken"> Токен для передачи в функцию обработки выше ее при вызове </param>
            <param name="onStreamClosedFunc"> Функция, вызывающаяся при закрытии стрима </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.SubscribeCandlestickStream(System.String,System.String,System.Func{Common.Models.CandlestickStreamModel,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Action)">
            <summary>
                Подписывается на стрим данных по свечам для опред пары
            </summary>
            <param name="name"> Наименование объекта торговли </param>
            <param name="candleStickInterval"> Интервал свечей </param>
            <param name="onMessageReceivedFunc"> Функция обрабатываюащя данные объекта <see cref="T:Common.Models.CandlestickStreamModel"/> </param>
            <param name="cancellationToken"> Токен для передачи в функцию обработки выше ее при вызове </param>
            <param name="onStreamClosedFunc"> Функция, вызывающаяся при закрытии стрима </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.SubscribeAllMarketTickersStream(System.Func{System.Collections.Generic.IEnumerable{Common.Models.TradeObjectStreamModel},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Action)">
            <summary>
                Подписывается на стрим статистики всех мини-тикеров за 24 часа
            </summary>
            <param name="onMessageReceivedFunc"> Функция обрабатываюащя данные объекта <see cref="T:Common.Models.TradeObjectStreamModel"/> </param>
            <param name="cancellationToken"> Токен для передачи в функцию обработки выше ее при вызове </param>
            <param name="onStreamClosedFunc"> Функция, вызывающаяся при закрытии стрима </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.SubscribeAllBookTickersStream(System.Func{Common.Models.BookTickerStreamModel,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Action)">
            <summary>
                Подписывается на стрим обновлений лучшей цены покупки или продажи или количество
                в режиме реального времени для всех символов
            </summary>
            <param name="onMessageReceivedFunc"> Функция обрабатываюащя данные объекта <see cref="T:Common.Models.BookTickerStreamModel"/> </param>
            <param name="cancellationToken"> Токен для передачи в функцию обработки выше ее при вызове </param>
            <param name="onStreamClosedFunc"> Функция, вызывающаяся при закрытии стрима </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.SubscribeAllMarketMiniTickersStream(System.Func{System.Collections.Generic.IEnumerable{Common.Models.MiniTickerStreamModel},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Action)">
            <summary>
                Подписывается на стрим статистики всех мини-тикеров за 24 часа
            </summary>
            <param name="onMessageReceivedFunc"> Функция обрабатывающая данные объекта <see cref="T:Common.Models.MiniTickerStreamModel"/> </param>
            <param name="cancellationToken"> Токен для передачи в функцию обработки выше ее при вызове </param>
            <param name="onStreamClosedFunc"> Функция, вызывающаяся при закрытии стрима </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.SubscribePartialBookDepthStream(System.String,System.Func{Common.Models.OrderBookModel,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Action,System.Int32,System.Boolean)">
            <summary>
                Подписывается на стрим лучших ордеров спроса и предложений
            </summary>
            <param name="name"> Название объекта торговли </param>
            <param name="onMessageReceivedFunc"> Функция обрабатываюащя данные объекта <see cref="T:Common.Models.OrderBookModel"/> </param>
            <param name="cancellationToken"> Токен для передачи в функцию обработки выше ее при вызове </param>
            <param name="onStreamClosedFunc"> Функция, вызывающаяся при закрытии стрима </param>
            <param name="levels"> Кол-во ордеров. Допустимые значения 5, 10, 20 </param>
            <param name="activateFastReceive"> Активировать прием данных раз в 100 миллисекунд </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.CreateNewLimitOrderAsync(System.String,Common.Enums.OrderSideType,System.String,System.Double,System.Double,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Создать новый лимитный ордер
            </summary>
            <param name="name"> Наименование объекта </param>
            <param name="sideType"> Купить или продать </param>
            <param name="timeOnForceType">
                Время активности ордера
            <remarks> 
                Возможные значения для Binance:
                <br/>
                GTC - Good Til Canceled - ордер будет висеть до тех пор, пока его не отменят (по-умолчанию)
                <br/>
                IOC - Immediate Or Cancel - будет куплено то количество, которое можно купить немедленно. Все, что не удалось купить, будет отменено
                <br/>
                FOK - Fill or Kill - либо будет куплено все указанное количество немедленно, либо не будет куплено вообще ничего, ордер отменится
            </remarks>
            </param>
            <param name="price"> Цена </param>
            <param name="quantity"> Количество (объем) </param>
            <param name="recvWindow"> 
                Установить кол-во миллисекунд, которое прибавляется к timestamp
                и формирует окно действия запроса
            </param>
            <param name="isTest"> Тестовый ли запрос </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.CreateNewMarketOrderAsync(System.String,Common.Enums.OrderSideType,System.Double,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Создать новый рыночный ордер
            </summary>
            <param name="name"> Наименование объекта </param>
            <param name="sideType"> Купить или продать </param>
            <param name="quantity"> Количество (объем) </param>
            <param name="recvWindow"> 
                Установить кол-во миллисекунд, которое прибавляется к timestamp
                и формирует окно действия запроса
            </param>
            <param name="isTest"> Тестовый ли запрос </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.CreateNewStopLossOrderAsync(System.String,Common.Enums.OrderSideType,System.Double,System.Double,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Создать новый стоп-лосс ордер
            </summary>
            <param name="name"> Наименование объекта </param>
            <param name="sideType"> Купить или продать </param>
            <param name="quantity"> Количество (объем) </param>
            <param name="stopPrice"> Стоп цена </param>
            <param name="recvWindow"> 
                Установить кол-во миллисекунд, которое прибавляется к timestamp
                и формирует окно действия запроса
            </param>
            <param name="isTest"> Тестовый ли запрос </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.CreateNewStopLossLimitOrderAsync(System.String,Common.Enums.OrderSideType,System.String,System.Double,System.Double,System.Double,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Создать новый лимитный стоп-лосс ордер
            </summary>
            <param name="name"> Наименование объекта </param>
            <param name="sideType"> Купить или продать </param>
            <param name="timeOnForceType">
                Время активности ордера
            <remarks> 
                Возможные значения для Binance:
                <br/>
                GTC - Good Til Canceled - ордер будет висеть до тех пор, пока его не отменят (по-умолчанию)
                <br/>
                IOC - Immediate Or Cancel - будет куплено то количество, которое можно купить немедленно. Все, что не удалось купить, будет отменено
                <br/>
                FOK - Fill or Kill - либо будет куплено все указанное количество немедленно, либо не будет куплено вообще ничего, ордер отменится
            </remarks>
            </param>
            <param name="price"> Цена </param>
            <param name="quantity"> Количество (объем) </param>
            <param name="stopPrice"> Стоп цена </param>
            <param name="recvWindow"> 
                Установить кол-во миллисекунд, которое прибавляется к timestamp
                и формирует окно действия запроса
            </param>
            <param name="isTest"> Тестовый ли запрос </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.CreateNewTakeProfitOrderAsync(System.String,Common.Enums.OrderSideType,System.Double,System.Double,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Создать новый TakeProfit ордер
            </summary>
            <param name="name"> Наименование объекта </param>
            <param name="quantity"> Количество (объем) </param>
            <param name="sideType"> Купить или продать </param>
            <param name="stopPrice"> Стоп цена </param>
            <param name="recvWindow"> 
                Установить кол-во миллисекунд, которое прибавляется к timestamp
                и формирует окно действия запроса
            </param>
            <param name="isTest"> Тестовый ли запрос </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.CreateNewTakeProfitLimitOrderAsync(System.String,Common.Enums.OrderSideType,System.String,System.Double,System.Double,System.Double,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Создать новый TakeProfitLimit ордер
            </summary>
            <param name="name"> Наименование объекта </param>
            <param name="quantity"> Количество (объем) </param>
            <param name="sideType"> Купить или продать </param>
            <param name="timeOnForceType">
                Время активности ордера
            <remarks> 
                Возможные значения для Binance:
                <br/>
                GTC - Good Til Canceled - ордер будет висеть до тех пор, пока его не отменят (по-умолчанию)
                <br/>
                IOC - Immediate Or Cancel - будет куплено то количество, которое можно купить немедленно. Все, что не удалось купить, будет отменено
                <br/>
                FOK - Fill or Kill - либо будет куплено все указанное количество немедленно, либо не будет куплено вообще ничего, ордер отменится
            </remarks>
            </param>
            <param name="price"> Цена </param>
            <param name="stopPrice"> Стоп цена </param>
            <param name="recvWindow"> 
                Установить кол-во миллисекунд, которое прибавляется к timestamp
                и формирует окно действия запроса
            </param>
            <param name="isTest"> Тестовый ли запрос </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.CreateNewLimitMakerOrderAsync(System.String,Common.Enums.OrderSideType,System.Double,System.Double,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Создать новый LimitMaker ордер
            </summary>
            <param name="name"> Наименование объекта </param>
            <param name="quantity"> Количество (объем) </param>
            <param name="price"> Цена </param>
            <param name="sideType"> Купить или продать </param>
            <param name="recvWindow"> 
                Установить кол-во миллисекунд, которое прибавляется к timestamp
                и формирует окно действия запроса
            </param>
            <param name="isTest"> Тестовый ли запрос </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
                Отменяет ордер по объекту торговли
            </summary>
            <param name="name"> Наименование объекта </param>
            <param name="orderId"> Id ордера из системы </param>
            <param name="origClientOrderId"> Id ордера, который указывал пользователь </param>
            <param name="recvWindow"> 
                Установить кол-во миллисекунд, которое прибавляется к timestamp
                и формирует окно действия запроса
            </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.CancelAllOrdersAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
                Отменяет все ордера по объекту торговли
            </summary>
            <param name="name"> Наименование объекта </param>
            <param name="recvWindow"> 
                Установить кол-во миллисекунд, которое прибавляется к timestamp
                и формирует окно действия запроса
            </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.CheckOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
                Проверить состояние ордера по объекту торговли
            </summary>
            <param name="name"> Наименование объекта </param>
            <param name="orderId"> Id ордера из системы </param>
            <param name="origClientOrderId"> Id ордера, который указывал пользователь </param>
            <param name="recvWindow"> 
                Установить кол-во миллисекунд, которое прибавляется к timestamp
                и формирует окно действия запроса
            </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.CheckAllOpenOrdersAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
                Проверить сосотояние всех открытов ордеров (или ордеров по паре)
            </summary>
            <param name="name"> Наименование объекта возможно null </param>
            <param name="recvWindow"> 
                Установить кол-во миллисекунд, которое прибавляется к timestamp
                и формирует окно действия запроса
            </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Int32,System.Int64,System.Threading.CancellationToken)">
            <summary>
                Получить все ордера по объекту торговли
            </summary>
            <param name="name"></param>
            <param name="orderId"> Будут возвращены ордера >= orderId </param>
            <remarks>
                Если указаны startTime и/или endTime, orderId не требуется
            </remarks>
            <param name="startTime"> Время начала поиска ордеров </param>
            <param name="endTime"> Время окончания поиска ордеров </param>
            <param name="limit"></param>
            <param name="recvWindow"> 
                Установить кол-во миллисекунд, которое прибавляется к timestamp
                и формирует окно действия запроса
            </param>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="M:ExchangeLibrary.IExchange.GetAccountInformationAsync(System.Threading.CancellationToken)">
            <summary>
                Получить информацию об аккаунте
            </summary>
            <param name="cancellationToken"> Токен отмены </param>
        </member>
        <member name="T:ExchangeLibrary.OptionsBase">
            <summary>
                Базовый класс настроек бирж
            </summary>
        </member>
        <member name="P:ExchangeLibrary.OptionsBase.Name">
            <summary>
                Название настроек
            </summary>
        </member>
    </members>
</doc>
